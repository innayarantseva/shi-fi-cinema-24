You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.

Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

Naming Conventions

- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

Syntax and Formatting

- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

UI and Styling

- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization

- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

Key Conventions

- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.

Prisma Best Practices

- Use singleton pattern for PrismaClient in src/lib/prisma.ts
- Leverage Prisma with Next.js Server Components for direct DB access
- Keep schema.prisma in project root, migrations in prisma/migrations
- Use SQLite for development, consider PostgreSQL for production
- Implement proper error handling and connection management
- Utilize Prisma Studio for database visualization
- Follow Prisma's seeding patterns for test data
- Keep Prisma Client generation in sync with schema changes

Project Structure

- Follow Next.js ./src directory convention
- Keep database logic in src/lib/prisma.ts
- Place API routes in src/app/api
- Store components in src/components
- Maintain types in src/types
- Group related features in src/features

Follow Next.js docs for Data Fetching, Rendering, and Routing.
